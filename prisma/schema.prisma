datasource db {
    provider  = "postgresql"
    url       = env("POSTGRES_PRISMA_URL")
    directUrl = env("POSTGRES_URL_NON_POOLING")
}

generator client {
    provider = "prisma-client-js"
}

model Category {
    id        Int       @id @default(autoincrement())
    name      String    @unique
    products  Product[]
    createdAt DateTime  @default(now())
    updatedAt DateTime  @updatedAt
}

model Cart {
    id          Int        @id @default(autoincrement())
    items       CartItem[]
    totalAmount Int        @default(0)
    user        User?      @relation(fields: [userId], references: [id])
    userId      Int?       @unique
    token       String
    createdAt   DateTime   @default(now())
    updatedAt   DateTime   @updatedAt
}

model CartItem {
    id            Int          @id @default(autoincrement())
    productItem   ProductItem  @relation(fields: [productItemId], references: [id])
    productItemId Int
    cart          Cart?        @relation(fields: [cartId], references: [id])
    cartId        Int?
    quantity      Int
    ingridients   Ingridient[]
    createdAt     DateTime     @default(now())
    updatedAt     DateTime     @updatedAt
}

model User {
    id               Int               @id @default(autoincrement())
    email            String            @unique
    password         String
    fullName         String
    role             UserRole          @default(USER)
    provider         String?
    providerId       String?
    cart             Cart?
    orders           Order[]
    verificationCode VerificationCode?
    updatedAt        DateTime          @updatedAt
    createdAt        DateTime          @default(now())
}

model Product {
    id          Int           @id @default(autoincrement())
    name        String
    image       String
    ingridients Ingridient[]
    categoryId  Int?
    category    Category?     @relation(fields: [categoryId], references: [id])
    items       ProductItem[]
    createdAt   DateTime      @default(now())
    updatedAt   DateTime      @updatedAt
}

model ProductItem {
    id        Int        @id @default(autoincrement())
    price     Int
    size      Int?
    pizzaType Int?
    product   Product    @relation(fields: [productId], references: [id])
    productId Int
    createdAt DateTime   @default(now())
    updatedAt DateTime   @updatedAt
    cartItem  CartItem[]
}

model Ingridient {
    id        Int        @id @default(autoincrement())
    name      String
    price     Int
    imageUrl  String
    products  Product[]
    cartItem  CartItem[]
    createdAt DateTime   @default(now())
    updatedAt DateTime   @updatedAt
}

model Order {
    id          Int         @id @default(autoincrement())
    user        User?       @relation(fields: [userId], references: [id])
    userId      Int?
    token       String
    totalAmount Int
    status      OrderStatus
    paymentId   String?
    items       Json
    fullName    String
    email       String
    phone       String
    address     String
    comment     String?
    createdAt   DateTime    @default(now())
    updatedAt   DateTime    @updatedAt
}

model VerificationCode {
    id        Int      @id @default(autoincrement())
    user      User     @relation(fields: [userId], references: [id])
    userId    Int      @unique
    code      String
    createdAt DateTime @default(now())

    @@unique([userId, code])
}

enum OrderStatus {
    PENDING
    SUCCEEDED
    CANCELLED
}

enum UserRole {
    USER
    ADMIN
}
